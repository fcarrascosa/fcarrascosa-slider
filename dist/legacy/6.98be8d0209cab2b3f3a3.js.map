{"version":3,"sources":["webpack:///../src/lib/directive.ts","webpack:///../src/lib/dom.ts","webpack:///../src/lib/part.ts","webpack:///../src/lib/template.ts","webpack:///../src/lib/template-instance.ts","webpack:///../src/lib/template-result.ts","webpack:///../src/lib/parts.ts","webpack:///../src/lib/default-template-processor.ts","webpack:///../src/lib/template-factory.ts","webpack:///../src/lib/render.ts","webpack:///src/lit-html.ts","webpack:///../src/lib/modify-template.ts","webpack:///../src/lib/shady-render.ts","webpack:///../src/lib/updating-element.ts","webpack:///../src/lib/css-tag.ts","webpack:///src/lit-element.ts"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","start","end","arguments","length","n","nextSibling","removeChild","noChange","nothing","marker","concat","String","Math","random","slice","nodeMarker","markerRegex","RegExp","Template","result","element","_classCallCheck","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","node","nextNode","nodeType","hasAttributes","attributes","_length","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","_strings","lastIndex","_i","insert","s","createMarker","match","createTextNode","insertBefore","_parent","previousSibling","_i2","pop","_i3","_nodesToRemove","str","suffix","isTemplatePartActive","part","createComment","template_instance_TemplateInstance","TemplateInstance","template","processor","options","template_instance_classCallCheck","__parts","key","value","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","setValue","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_part","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","_part2","handleTextExpression","insertAfterNode","_this$__parts","apply","_toConsumableArray","handleAttributeExpressions","adoptNode","upgrade","template_result_TemplateResult","TemplateResult","template_result_classCallCheck","template_result_createClass","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isPrimitive","parts_typeof","isIterable","Array","isArray","AttributeCommitter","parts_classCallCheck","dirty","_createPart","parts_createClass","parts_AttributePart","text","v","t","setAttribute","_getValue","AttributePart","committer","directive","parts_NodePart","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","templateFactory","update","instance","_clone","itemPart","itemParts","item","appendIntoPart","insertAfterPart","parts_BooleanAttributePart","BooleanAttributePart","Error","PropertyCommitter","_AttributeCommitter","_this","parts_possibleConstructorReturn","parts_getPrototypeOf","call","single","parts_inherits","PropertyPart","parts_get","prototype","_AttributePart","eventOptionsSupported","parts_options","capture","addEventListener","removeEventListener","_e","parts_EventPart","EventPart","eventName","eventContext","_this2","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","defaultTemplateProcessor","DefaultTemplateProcessor","default_template_processor_classCallCheck","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","join","getTemplateElement","render_parts","lit_html_html","_len","_key","walkerNodeFilter","removeNodesFromTemplate","modify_template_nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shady_render_shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","shady_render_prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","_style","textContent","templates","from","shady_render_removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","prepareTemplateStyles","style","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","toAttribute","Boolean","Object","JSON","stringify","fromAttribute","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","UpdatingElement","_HTMLElement","updating_element_classCallCheck","updating_element_possibleConstructorReturn","updating_element_getPrototypeOf","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","updating_element_inherits","_wrapNativeSuper","HTMLElement","_saveInstanceProperties","_requestUpdate","constructor","_classProperties","_v","p","hasOwnProperty","_this3","_attributeToProperty","ctor","attr","_attributeNameForProperty","attrValue","_propertyValueToAttribute","propName","_attributeToPropertyMap","_propertyValueFromAttribute","oldValue","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","_enqueueUpdate2","regeneratorRuntime","mark","_callee","reject","previousUpdatePromise","_this4","wrap","_context","prev","res","rej","t0","_hasConnected","performUpdate","t1","stop","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","_this5","size","k","_propertyToAttribute","_this6","superProperties","getPrototypeOf","_ensureClassProperties","noAccessor","updating_element_typeof","defineProperty","configurable","enumerable","finalized","superCtor","finalize","props","properties","propKeys","updating_element_toConsumableArray","getOwnPropertyNames","getOwnPropertySymbols","createProperty","_this7","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","css_tag_classCallCheck","_styleSheet","replaceSync","css","reduce","acc","idx","textFromCSSResult","flattenStyles","flat","Infinity","arrayFlat","lit_element_LitElement","_UpdatingElement","LitElement","lit_element_classCallCheck","lit_element_possibleConstructorReturn","lit_element_getPrototypeOf","lit_element_inherits","lit_element_get","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","hasUpdated","styleElement","templateResult","render","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","assign","appendInto","render_render","delete"],"mappings":"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","file":"legacy/6.98be8d0209cab2b3f3a3.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// tslint:disable-next-line:no-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node',\n  index: number\n}|{readonly type: 'attribute', index: number, readonly name: string, readonly strings: ReadonlyArray<string>};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: ReadonlyArray<unknown>) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: ReadonlyArray<unknown>;\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: ReadonlyArray<unknown>,\n      type: string, processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment poisition.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceeding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceeding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? marker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|Symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // tslint:disable-next-line:no-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = value as string;\n    } else {\n      this.__commitNode(document.createTextNode(\n          typeof value === 'string' ? value : String(value)));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // tslint:disable-next-line:no-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    }\n  };\n  // tslint:disable-next-line:no-any\n  window.addEventListener('test', options as any, options);\n  // tslint:disable-next-line:no-any\n  window.removeEventListener('test', options as any, options);\n} catch (_e) {\n}\n\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behaviour, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport type templateCache = {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>; //\n  readonly keyString: Map<string, Template>;\n};\n\nexport const templateCaches = new Map<string, templateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\nimport {TemplateResult} from './template-result.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: TemplateResult,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module shady-render\n */\n\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(\n    template: Template, nodesToRemove: Set<Node>) {\n  const {element: {content}, parts} = template;\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let part = parts[partIndex];\n  let nodeIndex = -1;\n  let removeCount = 0;\n  const nodesToRemoveInTemplate = [];\n  let currentRemovingNode: Node|null = null;\n  while (walker.nextNode()) {\n    nodeIndex++;\n    const node = walker.currentNode as Element;\n    // End removal if stepped past the removing node\n    if (node.previousSibling === currentRemovingNode) {\n      currentRemovingNode = null;\n    }\n    // A node to remove was found in the template\n    if (nodesToRemove.has(node)) {\n      nodesToRemoveInTemplate.push(node);\n      // Track node we're removing\n      if (currentRemovingNode === null) {\n        currentRemovingNode = node;\n      }\n    }\n    // When removing, increment count by which to adjust subsequent part indices\n    if (currentRemovingNode !== null) {\n      removeCount++;\n    }\n    while (part !== undefined && part.index === nodeIndex) {\n      // If part is in a removed node deactivate it by setting index to -1 or\n      // adjust the index as needed.\n      part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n      // go to the next active part.\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n      part = parts[partIndex];\n    }\n  }\n  nodesToRemoveInTemplate.forEach((n) => n.parentNode!.removeChild(n));\n}\n\nconst countNodes = (node: Node) => {\n  let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n  const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n  while (walker.nextNode()) {\n    count++;\n  }\n  return count;\n};\n\nconst nextActiveIndexInTemplateParts =\n    (parts: TemplatePart[], startIndex: number = -1) => {\n      for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(\n    template: Template, node: Node, refNode: Node|null = null) {\n  const {element: {content}, parts} = template;\n  // If there's no refNode, then put node at end of template.\n  // No part indices need to be shifted in this case.\n  if (refNode === null || refNode === undefined) {\n    content.appendChild(node);\n    return;\n  }\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let insertCount = 0;\n  let walkerIndex = -1;\n  while (walker.nextNode()) {\n    walkerIndex++;\n    const walkerNode = walker.currentNode as Element;\n    if (walkerNode === refNode) {\n      insertCount = countNodes(node);\n      refNode.parentNode!.insertBefore(node, refNode);\n    }\n    while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n      // If we've inserted the node, simply adjust all subsequent parts\n      if (insertCount > 0) {\n        while (partIndex !== -1) {\n          parts[partIndex].index += insertCount;\n          partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n        return;\n      }\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n    }\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {removeNodes} from './dom.js';\nimport {insertNodeIntoTemplate, removeNodesFromTemplate} from './modify-template.js';\nimport {RenderOptions} from './render-options.js';\nimport {parts, render as litRender} from './render.js';\nimport {templateCaches} from './template-factory.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\nexport {html, svg, TemplateResult} from '../lit-html.js';\n\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type: string, scopeName: string) =>\n    `${type}--${scopeName}`;\n\nlet compatibleShadyCSSVersion = true;\n\nif (typeof window.ShadyCSS === 'undefined') {\n  compatibleShadyCSSVersion = false;\n} else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n  console.warn(\n      `Incompatible ShadyCSS version detected. ` +\n      `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n      `@webcomponents/shadycss@1.3.1.`);\n  compatibleShadyCSSVersion = false;\n}\n\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName: string) =>\n    (result: TemplateResult) => {\n      const cacheKey = getTemplateCacheKey(result.type, scopeName);\n      let templateCache = templateCaches.get(cacheKey);\n      if (templateCache === undefined) {\n        templateCache = {\n          stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n          keyString: new Map<string, Template>()\n        };\n        templateCaches.set(cacheKey, templateCache);\n      }\n\n      let template = templateCache.stringsArray.get(result.strings);\n      if (template !== undefined) {\n        return template;\n      }\n\n      const key = result.strings.join(marker);\n      template = templateCache.keyString.get(key);\n      if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n          window.ShadyCSS!.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n      }\n      templateCache.stringsArray.set(result.strings, template);\n      return template;\n    };\n\nconst TEMPLATE_TYPES = ['html', 'svg'];\n\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName: string) => {\n  TEMPLATE_TYPES.forEach((type) => {\n    const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n    if (templates !== undefined) {\n      templates.keyString.forEach((template) => {\n        const {element: {content}} = template;\n        // IE 11 doesn't support the iterable param Set constructor\n        const styles = new Set<Element>();\n        Array.from(content.querySelectorAll('style')).forEach((s: Element) => {\n          styles.add(s);\n        });\n        removeNodesFromTemplate(template, styles);\n      });\n    }\n  });\n};\n\nconst shadyRenderSet = new Set<string>();\n\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles =\n    (renderedDOM: DocumentFragment, template: Template, scopeName: string) => {\n      shadyRenderSet.add(scopeName);\n      // Move styles out of rendered DOM and store.\n      const styles = renderedDOM.querySelectorAll('style');\n      const {length} = styles;\n      // If there are no styles, skip unnecessary work\n      if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS!.prepareTemplateStyles(template.element, scopeName);\n        return;\n      }\n      const condensedStyle = document.createElement('style');\n      // Collect styles into a single style. This helps us make sure ShadyCSS\n      // manipulations will not prevent us from being able to fix up template\n      // part indices.\n      // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n      // currently does this anyway. When it does not, this should be changed.\n      for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode!.removeChild(style);\n        condensedStyle.textContent! += style.textContent;\n      }\n      // Remove styles from nested templates in this scope.\n      removeStylesFromLitTemplates(scopeName);\n      // And then put the condensed style into the \"root\" template passed in as\n      // `template`.\n      const content = template.element.content;\n      insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n      // Note, it's important that ShadyCSS gets the template that `lit-html`\n      // will actually render so that it can update the style inside when\n      // needed (e.g. @apply native Shadow DOM case).\n      window.ShadyCSS!.prepareTemplateStyles(template.element, scopeName);\n      const style = content.querySelector('style');\n      if (window.ShadyCSS!.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n      } else {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n      }\n    };\n\nexport interface ShadyRenderOptions extends Partial<RenderOptions> {\n  scopeName: string;\n}\n\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render =\n    (result: TemplateResult,\n     container: Element|DocumentFragment|ShadowRoot,\n     options: ShadyRenderOptions) => {\n      const scopeName = options.scopeName;\n      const hasRendered = parts.has(container);\n      const needsScoping = compatibleShadyCSSVersion &&\n          container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n          !!(container as ShadowRoot).host && result instanceof TemplateResult;\n      // Handle first render to a scope specially...\n      const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n      // On first scope render, render into a fragment; this cannot be a single\n      // fragment that is reused since nested renders can occur synchronously.\n      const renderContainer =\n          firstScopeRender ? document.createDocumentFragment() : container;\n      litRender(\n          result,\n          renderContainer,\n          {templateFactory: shadyTemplateFactory(scopeName), ...options} as\n              RenderOptions);\n      // When performing first scope render,\n      // (1) We've rendered into a fragment so that there's a chance to\n      // `prepareTemplateStyles` before sub-elements hit the DOM\n      // (which might cause them to render based on a common pattern of\n      // rendering in a custom element's `connectedCallback`);\n      // (2) Scope the template with ShadyCSS one time only for this scope.\n      // (3) Render the fragment into the container and make sure the\n      // container knows its `part` is the one we just rendered. This ensures\n      // DOM will be re-used on subsequent renders.\n      if (firstScopeRender) {\n        const part = parts.get(renderContainer)!;\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n          prepareTemplateStyles(\n              renderContainer as DocumentFragment,\n              part.value.template,\n              scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n      }\n      // After elements have hit the DOM, update styling if this is the\n      // initial render to this container.\n      // This is needed whenever dynamic changes are made so it would be\n      // safest to do every render; however, this would regress performance\n      // so we leave it up to the user to call `ShadyCSSS.styleElement`\n      // for dynamic changes.\n      if (!hasRendered && needsScoping) {\n        window.ShadyCSS!.styleElement((container as ShadowRoot).host);\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    <P extends PropertyKey>(prop: P, _obj: unknown): P => prop;\n\ndeclare global {\n  var JSCompiler_renameProperty: <P extends PropertyKey>(\n      prop: P, _obj: unknown) => P;\n\n  interface Window {\n    JSCompiler_renameProperty: typeof JSCompiler_renameProperty;\n  }\n}\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Function called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string|null, type?: TypeHint): Type;\n\n  /**\n   * Function called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n    ComplexAttributeConverter<Type>|((value: string, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean|string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\nexport type PropertyValues = Map<PropertyKey, unknown>;\n\nexport const defaultConverter: ComplexAttributeConverter = {\n\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        return value ? '' : null;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        return value == null ? value : JSON.stringify(value);\n    }\n    return value;\n  },\n\n  fromAttribute(value: string|null, type?: unknown) {\n    switch (type) {\n      case Boolean:\n        return value !== null;\n      case Number:\n        return value === null ? null : Number(value);\n      case Object:\n      case Array:\n        return JSON.parse(value!);\n    }\n    return value;\n  }\n\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual\n};\n\nconst microtaskPromise = Promise.resolve(true);\n\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\ntype UpdateState = typeof STATE_HAS_UPDATED|typeof STATE_UPDATE_REQUESTED|\n    typeof STATE_IS_REFLECTING_TO_ATTRIBUTE|\n    typeof STATE_IS_REFLECTING_TO_PROPERTY|typeof STATE_HAS_CONNECTED;\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport abstract class UpdatingElement extends HTMLElement {\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   */\n  private static _attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static finalized = true;\n\n  /**\n   * Memoized list of all class properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   */\n  private static _classProperties?: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring the property.\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this._classProperties!.forEach((v, p) => {\n      const attr = this._attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this._attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Ensures the private `_classProperties` property metadata is created.\n   * In addition to `finalize` this is also called in `createProperty` to\n   * ensure the `@property` decorator can add property metadata.\n   */\n  /** @nocollapse */\n  private static _ensureClassProperties() {\n    // ensure private storage for property declarations.\n    if (!this.hasOwnProperty(\n            JSCompiler_renameProperty('_classProperties', this))) {\n      this._classProperties = new Map();\n      // NOTE: Workaround IE11 not supporting Map constructor argument.\n      const superProperties: PropertyDeclarationMap =\n          Object.getPrototypeOf(this)._classProperties;\n      if (superProperties !== undefined) {\n        superProperties.forEach(\n            (v: PropertyDeclaration, k: PropertyKey) =>\n                this._classProperties!.set(k, v));\n      }\n    }\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist.\n   * The property setter calls the property's `hasChanged` property option\n   * or uses a strict identity check to determine whether or not to request\n   * an update.\n   * @nocollapse\n   */\n  static createProperty(\n      name: PropertyKey,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure storage exists for property\n    // metadata.\n    this._ensureClassProperties();\n    this._classProperties!.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n      return;\n    }\n    const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n    Object.defineProperty(this.prototype, name, {\n      // tslint:disable-next-line:no-any no symbol in index\n      get(): any {\n        return this[key];\n      },\n      set(this: UpdatingElement, value: unknown) {\n        // tslint:disable-next-line:no-any no symbol in index\n        const oldValue = (this as any)[name];\n        // tslint:disable-next-line:no-any no symbol in index\n        (this as any)[key] = value;\n        this._requestUpdate(name, oldValue);\n      },\n      configurable: true,\n      enumerable: true\n    });\n  }\n\n  /**\n   * Creates property accessors for registered properties and ensures\n   * any superclasses are also finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n        this.finalized) {\n      return;\n    }\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this);\n    if (typeof superCtor.finalize === 'function') {\n      superCtor.finalize();\n    }\n    this.finalized = true;\n    this._ensureClassProperties();\n    // initialize Map populated in observedAttributes\n    this._attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...(typeof Object.getOwnPropertySymbols === 'function') ?\n            Object.getOwnPropertySymbols(props) :\n            []\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeSript lack of support for symbol in\n        // index types\n        // tslint:disable-next-line:no-any no symbol in index\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n  }\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static _attributeNameForProperty(\n      name: PropertyKey, options: PropertyDeclaration) {\n    const attribute = options.attribute;\n    return attribute === false ?\n        undefined :\n        (typeof attribute === 'string' ?\n             attribute :\n             (typeof name === 'string' ? name.toLowerCase() : undefined));\n  }\n\n  /**\n   * Returns true if a property should request an update.\n   * Called when a property value is set and uses the `hasChanged`\n   * option for the property if present or a strict identity check.\n   * @nocollapse\n   */\n  private static _valueHasChanged(\n      value: unknown, old: unknown, hasChanged: HasChanged = notEqual) {\n    return hasChanged(value, old);\n  }\n\n  /**\n   * Returns the property value for the given attribute value.\n   * Called via the `attributeChangedCallback` and uses the property's\n   * `converter` or `converter.fromAttribute` property option.\n   * @nocollapse\n   */\n  private static _propertyValueFromAttribute(\n      value: string|null, options: PropertyDeclaration) {\n    const type = options.type;\n    const converter = options.converter || defaultConverter;\n    const fromAttribute =\n        (typeof converter === 'function' ? converter : converter.fromAttribute);\n    return fromAttribute ? fromAttribute(value, type) : value;\n  }\n\n  /**\n   * Returns the attribute value for the given property value. If this\n   * returns undefined, the property will *not* be reflected to an attribute.\n   * If this returns null, the attribute will be removed, otherwise the\n   * attribute will be set to the value.\n   * This uses the property's `reflect` and `type.toAttribute` property options.\n   * @nocollapse\n   */\n  private static _propertyValueToAttribute(\n      value: unknown, options: PropertyDeclaration) {\n    if (options.reflect === undefined) {\n      return;\n    }\n    const type = options.type;\n    const converter = options.converter;\n    const toAttribute =\n        converter && (converter as ComplexAttributeConverter).toAttribute ||\n        defaultConverter.toAttribute;\n    return toAttribute!(value, type);\n  }\n\n  private _updateState: UpdateState = 0;\n  private _instanceProperties: PropertyValues|undefined = undefined;\n  private _updatePromise: Promise<unknown> = microtaskPromise;\n  private _hasConnectedResolver: (() => void)|undefined = undefined;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   */\n  private _changedProperties: PropertyValues = new Map();\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private _reflectingProperties: Map<PropertyKey, PropertyDeclaration>|\n      undefined = undefined;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  /**\n   * Performs element initialization. By default captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    this._saveInstanceProperties();\n    // ensures first update will be caught by an early access of `updateComplete`\n    this._requestUpdate();\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private _saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof UpdatingElement)\n        ._classProperties!.forEach((_v, p) => {\n          if (this.hasOwnProperty(p)) {\n            const value = this[p as keyof this];\n            delete this[p as keyof this];\n            if (!this._instanceProperties) {\n              this._instanceProperties = new Map();\n            }\n            this._instanceProperties.set(p, value);\n          }\n        });\n  }\n\n  /**\n   * Applies previously saved instance properties.\n   */\n  private _applyInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    // tslint:disable-next-line:no-any\n    this._instanceProperties!.forEach((v, p) => (this as any)[p] = v);\n    this._instanceProperties = undefined;\n  }\n\n  connectedCallback() {\n    this._updateState = this._updateState | STATE_HAS_CONNECTED;\n    // Ensure first connection completes an update. Updates cannot complete before\n    // connection and if one is pending connection the `_hasConnectionResolver`\n    // will exist. If so, resolve it to complete the update, otherwise\n    // requestUpdate.\n    if (this._hasConnectedResolver) {\n      this._hasConnectedResolver();\n      this._hasConnectedResolver = undefined;\n    }\n  }\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   */\n  disconnectedCallback() {\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   */\n  attributeChangedCallback(name: string, old: string|null, value: string|null) {\n    if (old !== value) {\n      this._attributeToProperty(name, value);\n    }\n  }\n\n  private _propertyToAttribute(\n      name: PropertyKey, value: unknown,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const attr = ctor._attributeNameForProperty(name, options);\n    if (attr !== undefined) {\n      const attrValue = ctor._propertyValueToAttribute(value, options);\n      // an undefined value does not change the attribute.\n      if (attrValue === undefined) {\n        return;\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n    }\n  }\n\n  private _attributeToProperty(name: string, value: string|null) {\n    // Use tracking info to avoid deserializing attribute value if it was\n    // just set from a property setter.\n    if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n      return;\n    }\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const propName = ctor._attributeToPropertyMap.get(name);\n    if (propName !== undefined) {\n      const options =\n          ctor._classProperties!.get(propName) || defaultPropertyDeclaration;\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n      this[propName as keyof this] =\n          // tslint:disable-next-line:no-any\n          ctor._propertyValueFromAttribute(value, options) as any;\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n    }\n  }\n\n  /**\n   * This private version of `requestUpdate` does not access or return the\n   * `updateComplete` promise. This promise can be overridden and is therefore\n   * not free to access.\n   */\n  private _requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      const ctor = this.constructor as typeof UpdatingElement;\n      const options =\n          ctor._classProperties!.get(name) || defaultPropertyDeclaration;\n      if (ctor._valueHasChanged(\n              this[name as keyof this], oldValue, options.hasChanged)) {\n        if (!this._changedProperties.has(name)) {\n          this._changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true &&\n            !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n          if (this._reflectingProperties === undefined) {\n            this._reflectingProperties = new Map();\n          }\n          this._reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n      this._enqueueUpdate();\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should\n   * be called when an element should update based on some state not triggered\n   * by setting a property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored. Returns the `updateComplete` Promise which is resolved\n   * when the update completes.\n   *\n   * @param name {PropertyKey} (optional) name of requesting property\n   * @param oldValue {any} (optional) old value of requesting property\n   * @returns {Promise} A Promise that is resolved when the update completes.\n   */\n  requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    this._requestUpdate(name, oldValue);\n    return this.updateComplete;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async _enqueueUpdate() {\n    // Mark state updating...\n    this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n    let resolve!: (r: boolean) => void;\n    let reject!: (e: Error) => void;\n    const previousUpdatePromise = this._updatePromise;\n    this._updatePromise = new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await previousUpdatePromise;\n    } catch (e) {\n      // Ignore any previous errors. We only care that the previous cycle is\n      // done. Any error should have been handled in the previous update.\n    }\n    // Make sure the element has connected before updating.\n    if (!this._hasConnected) {\n      await new Promise((res) => this._hasConnectedResolver = res);\n    }\n    try {\n      const result = this.performUpdate();\n      // If `performUpdate` returns a Promise, we await it. This is done to\n      // enable coordinating updates with a scheduler. Note, the result is\n      // checked to avoid delaying an additional microtask unless we need to.\n      if (result != null) {\n        await result;\n      }\n    } catch (e) {\n      reject(e);\n    }\n    resolve(!this._hasRequestedUpdate);\n  }\n\n  private get _hasConnected() {\n    return (this._updateState & STATE_HAS_CONNECTED);\n  }\n\n  private get _hasRequestedUpdate() {\n    return (this._updateState & STATE_UPDATE_REQUESTED);\n  }\n\n  protected get hasUpdated() {\n    return (this._updateState & STATE_HAS_UPDATED);\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * You can override this method to change the timing of updates. If this\n   * method is overridden, `super.performUpdate()` must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```\n   * protected async performUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.performUpdate();\n   * }\n   * ```\n   */\n  protected performUpdate(): void|Promise<unknown> {\n    // Mixin instance properties once, if they exist.\n    if (this._instanceProperties) {\n      this._applyInstanceProperties();\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.update(changedProperties);\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      throw e;\n    } finally {\n      // Ensure element can accept additional updates after an exception.\n      this._markUpdated();\n    }\n    if (shouldUpdate) {\n      if (!(this._updateState & STATE_HAS_UPDATED)) {\n        this._updateState = this._updateState | STATE_HAS_UPDATED;\n        this.firstUpdated(changedProperties);\n      }\n      this.updated(changedProperties);\n    }\n  }\n\n  private _markUpdated() {\n    this._changedProperties = new Map();\n    this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update. This getter can be implemented to\n   * await additional state. For example, it is sometimes useful to await a\n   * rendered element before fulfilling this Promise. To do this, first await\n   * `super.updateComplete` then any subsequent state.\n   *\n   * @returns {Promise} The Promise returns a boolean that indicates if the\n   * update resolved without triggering another update.\n   */\n  get updateComplete() {\n    return this._updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this._reflectingProperties !== undefined &&\n        this._reflectingProperties.size > 0) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this._reflectingProperties.forEach(\n          (v, k) => this._propertyToAttribute(k, this[k as keyof this], v));\n      this._reflectingProperties = undefined;\n    }\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected updated(_changedProperties: PropertyValues) {\n  }\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {\n  }\n}\n","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const supportsAdoptingStyleSheets =\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\n\nconst constructionToken = Symbol();\n\nexport class CSSResult {\n  _styleSheet?: CSSStyleSheet|null;\n\n  readonly cssText: string;\n\n  constructor(cssText: string, safeToken: symbol) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n          'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n    this.cssText = cssText;\n  }\n\n  // Note, this is a getter so that it's lazy. In practice, this means\n  // stylesheets are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet|null {\n    if (this._styleSheet === undefined) {\n      // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n      // is constructable.\n      if (supportsAdoptingStyleSheets) {\n        this._styleSheet = new CSSStyleSheet();\n        this._styleSheet.replaceSync(this.cssText);\n      } else {\n        this._styleSheet = null;\n      }\n    }\n    return this._styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) => {\n  return new CSSResult(String(value), constructionToken);\n};\n\nconst textFromCSSResult = (value: CSSResult) => {\n  if (value instanceof CSSResult) {\n    return value.cssText;\n  } else {\n    throw new Error(\n        `Value passed to 'css' function must be a 'css' function result: ${\n            value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n  }\n};\n\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings: TemplateStringsArray, ...values: CSSResult[]) => {\n  const cssText = values.reduce(\n      (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n      strings[0]);\n  return new CSSResult(cssText, constructionToken);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport {TemplateResult} from 'lit-html';\nimport {render} from 'lit-html/lib/shady-render.js';\n\nimport {PropertyValues, UpdatingElement} from './lib/updating-element.js';\n\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport {html, svg, TemplateResult, SVGTemplateResult} from 'lit-html/lit-html.js';\nimport {supportsAdoptingStyleSheets, CSSResult} from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n\ndeclare global {\n  interface Window {\n    litElementVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.0.1');\n\nexport interface CSSResultArray extends Array<CSSResult|CSSResultArray> {}\n\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(\n    styles: CSSResultArray, result: CSSResult[] = []): CSSResult[] {\n  for (let i = 0, length = styles.length; i < length; i++) {\n    const value = styles[i];\n    if (Array.isArray(value)) {\n      arrayFlat(value, result);\n    } else {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles: CSSResultArray): CSSResult[] =>\n    styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\n\nexport class LitElement extends UpdatingElement {\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   */\n  protected static finalized = true;\n\n  /**\n   * Render method used to render the lit-html TemplateResult to the element's\n   * DOM.\n   * @param {TemplateResult} Template to render.\n   * @param {Element|DocumentFragment} Node into which to render.\n   * @param {String} Element name.\n   * @nocollapse\n   */\n  static render = render;\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  static styles?: CSSResult|CSSResultArray;\n\n  private static _styles: CSSResult[]|undefined;\n\n  /** @nocollapse */\n  protected static finalize() {\n    super.finalize();\n    // Prepare styling that is stamped at first render time. Styling\n    // is built from user provided `styles` or is inherited from the superclass.\n    this._styles =\n        this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n        this._getUniqueStyles() :\n        this._styles || [];\n  }\n\n  /** @nocollapse */\n  private static _getUniqueStyles(): CSSResult[] {\n    // Take care not to call `this.styles` multiple times since this generates\n    // new CSSResults each time.\n    // TODO(sorvell): Since we do not cache CSSResults by input, any\n    // shared styles will generate new stylesheet objects, which is wasteful.\n    // This should be addressed when a browser ships constructable\n    // stylesheets.\n    const userStyles = this.styles;\n    const styles: CSSResult[] = [];\n    if (Array.isArray(userStyles)) {\n      const flatStyles = flattenStyles(userStyles);\n      // As a performance optimization to avoid duplicated styling that can\n      // occur especially when composing via subclassing, de-duplicate styles\n      // preserving the last item in the list. The last item is kept to\n      // try to preserve cascade order with the assumption that it's most\n      // important that last added styles override previous styles.\n      const styleSet = flatStyles.reduceRight((set, s) => {\n        set.add(s);\n        // on IE set.add does not return the set.\n        return set;\n      }, new Set<CSSResult>());\n      // Array.from does not work on Set in IE\n      styleSet.forEach((v) => styles.unshift(v));\n    } else if (userStyles) {\n      styles.push(userStyles);\n    }\n    return styles;\n  }\n\n  private _needsShimAdoptedStyleSheets?: boolean;\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   */\n  readonly renderRoot!: Element|DocumentFragment;\n\n  /**\n   * Performs element initialization. By default this calls `createRenderRoot`\n   * to create the element `renderRoot` node and captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    super.initialize();\n    (this as {renderRoot: Element | DocumentFragment}).renderRoot =\n        this.createRenderRoot();\n    // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n    // element's getRootNode(). While this could be done, we're choosing not to\n    // support this now since it would require different logic around de-duping.\n    if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n      this.adoptStyles();\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n  protected createRenderRoot(): Element|ShadowRoot {\n    return this.attachShadow({mode: 'open'});\n  }\n\n  /**\n   * Applies styling to the element shadowRoot using the `static get styles`\n   * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n   * available and will fallback otherwise. When Shadow DOM is polyfilled,\n   * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n   * is available but `adoptedStyleSheets` is not, styles are appended to the\n   * end of the `shadowRoot` to [mimic spec\n   * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n   */\n  protected adoptStyles() {\n    const styles = (this.constructor as typeof LitElement)._styles!;\n    if (styles.length === 0) {\n      return;\n    }\n    // There are three separate cases here based on Shadow DOM support.\n    // (1) shadowRoot polyfilled: use ShadyCSS\n    // (2) shadowRoot.adoptedStyleSheets available: use it.\n    // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n    // rendering\n    if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n      window.ShadyCSS.ScopingShim.prepareAdoptedCssText(\n          styles.map((s) => s.cssText), this.localName);\n    } else if (supportsAdoptingStyleSheets) {\n      (this.renderRoot as ShadowRoot).adoptedStyleSheets =\n          styles.map((s) => s.styleSheet!);\n    } else {\n      // This must be done after rendering so the actual style insertion is done\n      // in `update`.\n      this._needsShimAdoptedStyleSheets = true;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // Note, first update/render handles styleElement so we only call this if\n    // connected after first update.\n    if (this.hasUpdated && window.ShadyCSS !== undefined) {\n      window.ShadyCSS.styleElement(this);\n    }\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(changedProperties: PropertyValues) {\n    super.update(changedProperties);\n    const templateResult = this.render() as unknown;\n    if (templateResult instanceof TemplateResult) {\n      (this.constructor as typeof LitElement)\n          .render(\n              templateResult,\n              this.renderRoot,\n              {scopeName: this.localName, eventContext: this});\n    }\n    // When native Shadow DOM is used but adoptedStyles are not supported,\n    // insert styling after rendering to ensure adoptedStyles have highest\n    // priority.\n    if (this._needsShimAdoptedStyleSheets) {\n      this._needsShimAdoptedStyleSheets = false;\n      (this.constructor as typeof LitElement)._styles!.forEach((s) => {\n        const style = document.createElement('style');\n        style.textContent = s.cssText;\n        this.renderRoot.appendChild(style);\n      });\n    }\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  protected render(): TemplateResult|void {\n  }\n}\n"],"sourceRoot":""}